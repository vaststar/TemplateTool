// DO NOT EDIT - Auto generated
// Generated with {{ self._TemplateReference__context.name }}
#pragma once

#include <string>
#include <map>
#include <array>
#include <commonHead/ResourceColorLoader/model/Color.h>

namespace commonHead::model{

enum class ColorPaletteType
{
    None,
    {% for color in data %}
    {{ color.name.replace("-", " ").title().replace(" ", "") }},
    {% endfor %}
    LastColor
};

struct ColorPalette
{
    std::string name;
    std::string hex;
    std::array<int, 3> rgb{0,0,0};
    std::array<int, 4> rgba{0,0,0,1};

    Color toColor() const
    {
        return { rgba[0], rgba[1], rgba[2], rgba[3] };
    }
};

inline ColorPalette getColorPalette(ColorPaletteType type)
{
    switch (type)
    {
        {% for color in data %}
        case ColorPaletteType::{{ color.name.replace("-", " ").title().replace(" ", "") }}:
            return { "{{ color.name }}", "{{ color.hex }}", { {{ color.rgb.r }}, {{ color.rgb.g }}, {{ color.rgb.b }} }, { {{ color.rgba.r }}, {{ color.rgba.g }}, {{ color.rgba.b }}, {{ color.rgba.a }} } };
        {% endfor %}
        default:
            return {};
    }
}

inline ColorPalette getColorPalette(const std::string& colorName)
{
    static const std::map<std::string, ColorPaletteType> colorMap = {
        {% for color in data %}
        { "{{ color.name }}", ColorPaletteType::{{ color.name.replace("-", " ").title().replace(" ", "") }} },
        {% endfor %}
    };

    if (colorMap.find(colorName) != colorMap.end())
    {
        return getColorPalette(colorMap.at(colorName));
    }

    return {};
}

} // namespace commonHead::model