#include "ContactManager.h"

#include "ContactServiceLogger.h"
#include "ContactModel.h"
#include "Adapters/ContactAdapter.h"
namespace ucf::service{
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
class ContactManager::DataPrivate
{
public:
    DataPrivate(ucf::framework::ICoreFrameworkWPtr coreFramework);
    const std::unique_ptr<ucf::adapter::ContactAdapter>& getContactAdapter() const;
    const std::unique_ptr<ContactModel>& getContactModel() const;
private:
    const ucf::framework::ICoreFrameworkWPtr mCoreFrameworkWPtr;
    const std::unique_ptr<ucf::adapter::ContactAdapter> mContactAdapter;
    const std::unique_ptr<ContactModel>  mContactModelPtr;
};

ContactManager::DataPrivate::DataPrivate(ucf::framework::ICoreFrameworkWPtr coreFramework)
    : mCoreFrameworkWPtr(coreFramework)
    , mContactModelPtr(std::make_unique<ContactModel>(coreFramework))
    , mContactAdapter(std::make_unique<ucf::adapter::ContactAdapter>(coreFramework))
{

}

const std::unique_ptr<ContactModel>& ContactManager::DataPrivate::getContactModel() const
{
    return mContactModelPtr;
}

const std::unique_ptr<ucf::adapter::ContactAdapter>& ContactManager::DataPrivate::getContactAdapter() const
{
    return mContactAdapter;
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start ContactManager Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
ContactManager::ContactManager(ucf::framework::ICoreFrameworkWPtr coreFramework)
    : mDataPrivate(std::make_unique<DataPrivate>(coreFramework))
{

}

ContactManager::~ContactManager()
{

}

std::vector<model::IPersonContactPtr> ContactManager::getPersonContactList() const
{
    mDataPrivate->getContactAdapter()->fetchContactInfo("", [](const ucf::service::model::Contact& contact){
        SERVICE_LOG_DEBUG("test fetch contactInfo");
    });
    
    return mDataPrivate->getContactModel()->getPersonContacts();
}

model::IPersonContactPtr ContactManager::getPersonContact(const std::string& contactId) const
{
    return mDataPrivate->getContactModel()->getPersonContact(contactId);
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start ContactManager Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
}