#include "ContactManager.h"

#include <ucf/Services/ServiceCommonFile/ServiceLogger.h>
#include "ContactModel.h"
#include "Adapters/ContactAdapter.h"
namespace ucf::service{
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
class ContactManager::DataPrivate
{
public:
    DataPrivate(ucf::framework::ICoreFrameworkWPtr coreFramework, std::shared_ptr<ContactModel> contactModel);
    std::shared_ptr<ucf::adapter::ContactAdapter> getContactAdapter() const;
    std::shared_ptr<ContactModel> getContactModel() const;
private:
    ucf::framework::ICoreFrameworkWPtr mCoreFrameworkWPtr;
    std::shared_ptr<ucf::adapter::ContactAdapter> mContactAdapter;
    std::shared_ptr<ContactModel>  mContactModelPtr;
};

ContactManager::DataPrivate::DataPrivate(ucf::framework::ICoreFrameworkWPtr coreFramework, std::shared_ptr<ContactModel> contactModel)
    : mCoreFrameworkWPtr(coreFramework)
    , mContactModelPtr(contactModel)
    , mContactAdapter(std::make_shared<ucf::adapter::ContactAdapter>(coreFramework))
{

}

std::shared_ptr<ContactModel> ContactManager::DataPrivate::getContactModel() const
{
    return mContactModelPtr;
}

std::shared_ptr<ucf::adapter::ContactAdapter> ContactManager::DataPrivate::getContactAdapter() const
{
    return mContactAdapter;
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start ContactManager Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
ContactManager::ContactManager(ucf::framework::ICoreFrameworkWPtr coreFramework, std::shared_ptr<ContactModel> contactModel)
    : mDataPrivate(std::make_unique<DataPrivate>(coreFramework, contactModel))
{

}

ContactManager::~ContactManager()
{

}


std::vector<model::Contact> ContactManager::getContactList() const
{
    if (auto contactAdapter = mDataPrivate->getContactAdapter())
    {
        contactAdapter->fetchContactInfo("", [](const ucf::service::model::Contact& contact){
            SERVICE_LOG_DEBUG("test fetch contactInfo");
        });
    }
    
    if (auto contactModel = mDataPrivate->getContactModel())
    {
        return contactModel->getContacts();
    }

    return {};
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start ContactManager Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
}