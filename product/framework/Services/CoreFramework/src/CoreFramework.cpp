#include "CoreFramework.h"

#include <ucf/Services/ServiceCommonFile/ServiceLogger.h>
#include <ucf/CoreFramework/IService.h>

namespace ucf{
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

class CoreFramework::DataPrivate
{
public:
    DataPrivate();
};

CoreFramework::DataPrivate::DataPrivate()
{
    CORE_LOG_DEBUG("create CoreFramework::DataPrivate, address:" << this);
}

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start CoreFramework Logic////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

std::shared_ptr<ICoreFramework> ICoreFramework::CreateInstance()
{
    return std::make_shared<CoreFramework>();
}

CoreFramework::CoreFramework()
    : mDataPrivate(std::make_unique<CoreFramework::DataPrivate>())
{
    CORE_LOG_DEBUG("create CoreFramework, address:" << this);
}

CoreFramework::~CoreFramework()
{
    CORE_LOG_DEBUG("delete CoreFramework, address:" << this);
}

void CoreFramework::exitCoreFramework()
{
    CORE_LOG_DEBUG("exit CoreFramework, address:" << this);
    fireNotification(&ICoreFrameworkCallback::onCoreFrameworkExit);
}

std::string CoreFramework::getName() const
{
    return "CoreFramework";
}

void CoreFramework::initServices()
{
    auto allServices = getAllServices();
    std::for_each(allServices.begin(), allServices.end(), [](std::weak_ptr<IService> service){
        if (auto servicePtr = service.lock())
        {
            servicePtr->initService();
        }
    }); 
    fireNotification(&ICoreFrameworkCallback::OnServiceInitialized);
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish CoreFramework Logic////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
}