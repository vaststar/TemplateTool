#include "ClientInfoService.h"

#include <ucf/CoreFramework/ICoreFramework.h>

#include "ClientInfoServiceLogger.h"

namespace ucf::service{
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
class ClientInfoService::DataPrivate{
public:
    explicit DataPrivate(ucf::framework::ICoreFrameworkWPtr coreFramework);
    ucf::framework::ICoreFrameworkWPtr getCoreFramework() const;
private:
    ucf::framework::ICoreFrameworkWPtr mCoreFrameworkWPtr;
};

ClientInfoService::DataPrivate::DataPrivate(ucf::framework::ICoreFrameworkWPtr coreFramework)
    : mCoreFrameworkWPtr(coreFramework)
{

}

ucf::framework::ICoreFrameworkWPtr ClientInfoService::DataPrivate::getCoreFramework() const
{
    return mCoreFrameworkWPtr;
}

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start ClientInfoService Logic///////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
std::shared_ptr<IClientInfoService> IClientInfoService::createInstance(ucf::framework::ICoreFrameworkWPtr coreFramework)
{
    return std::make_shared<ClientInfoService>(coreFramework);
}

ClientInfoService::ClientInfoService(ucf::framework::ICoreFrameworkWPtr coreFramework)
    : mDataPrivate(std::make_unique<DataPrivate>(coreFramework))
{
    SERVICE_LOG_DEBUG("Create ClientInfoService, address:" << this);
}

ClientInfoService::~ClientInfoService()
{
    SERVICE_LOG_DEBUG("Delete ClientInfoService, address:" << this);
}

void ClientInfoService::initService()
{
    if (auto coreFramework = mDataPrivate->getCoreFramework().lock())
    {
        coreFramework->registerCallback(shared_from_this());
    }
}

std::string ClientInfoService::getServiceName() const
{
    return "ClientInfoService";
}

void ClientInfoService::onServiceInitialized()
{
    SERVICE_LOG_DEBUG("");
}

void ClientInfoService::onCoreFrameworkExit()
{
    SERVICE_LOG_DEBUG("");
}

model::Version ClientInfoService::getApplicationVersion() const
{
    return model::Version{"1", "0", "1"};
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish ClientInfoService Logic///////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
}