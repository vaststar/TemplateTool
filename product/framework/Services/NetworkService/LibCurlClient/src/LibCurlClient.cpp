#include <ucf/NetworkService/LibCurlClient/LibCurlClient.h>
#include <ucf/NetworkService/NetworkModelTypes/Http/NetworkHttpTypes.h>
#include <curl/curl.h>

#include "LibCurlClientLogger.h"
#include "LibCurlMultiHandleManager.h"

namespace ucf::network::libcurl{
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
class LibCurlClient::DataPrivate
{
public:
    DataPrivate();
    void start();
    void stop();
private:
    std::unique_ptr<LibCurlMultiHandleManager> mMultiHandleManager;
};

LibCurlClient::DataPrivate::DataPrivate()
    : mMultiHandleManager(std::make_unique<LibCurlMultiHandleManager>())
{
}

void LibCurlClient::DataPrivate::start()
{
    mMultiHandleManager->runLoop();
}

void LibCurlClient::DataPrivate::stop()
{
    mMultiHandleManager->stopLoop();
}

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish DataPrivate Logic/////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start LibCurlClient Logic////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
LibCurlClient::LibCurlClient()
    : mDataPrivate(std::make_unique<DataPrivate>())
{
}

LibCurlClient::~LibCurlClient()
{
    LIBCURL_LOG_DEBUG("");
    stopService();
}

void LibCurlClient::startService()
{
    LIBCURL_LOG_DEBUG("");
    mDataPrivate->start();
}

void LibCurlClient::stopService()
{
    LIBCURL_LOG_DEBUG("");
    mDataPrivate->stop();
}

void LibCurlClient::makeHttpRequest(const ucf::network::http::NetworkHttpRequest& httpRequest, const ucf::network::http::NetworkHttpResponseCallbackFunc& callBackFunc)
{
    LIBCURL_LOG_DEBUG("");
    
CURL *curl;
    CURLcode res;
    
    curl = curl_easy_init();
    if (curl) {
        curl_easy_setopt(curl, CURLOPT_URL, "http://www.example.com");
        /* example.com is redirected, so we tell libcurl to follow redirection */
        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
        
        res = curl_easy_perform(curl);
        
        /* Check for errors */
        if (res != CURLE_OK) {
            fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));
        }
        
        /* always cleanup */
        curl_easy_cleanup(curl);
    }

}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish LibCurlClient Logic////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
}