


#include "NetworkHttpCallbackHandler.h"

namespace ucf::service::network::http{
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
class NetworkHttpCallbackHandler::DataPrivate{
public:
    DataPrivate();
    void setResponseCallback(const NetworkHttpResponseCallbackFunc& callbackFunc){mResponseCallBack = callbackFunc;}
    NetworkHttpResponseCallbackFunc getResponseCallback() const{return mResponseCallBack;}

    
private:
    NetworkHttpResponseCallbackFunc mResponseCallBack;
};

NetworkHttpCallbackHandler::DataPrivate::DataPrivate()
{

}

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start NetworkHttpCallbackHandler Logic///////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
NetworkHttpCallbackHandler::NetworkHttpCallbackHandler()
    : mDataPrivate(std::make_unique<NetworkHttpCallbackHandler::DataPrivate>())
{

}

NetworkHttpCallbackHandler::~NetworkHttpCallbackHandler()
{

}

void NetworkHttpCallbackHandler::setResponseCallback(const NetworkHttpResponseCallbackFunc& callbackFunc)
{

}

void NetworkHttpCallbackHandler::setResponseHeader(int statusCode, const NetworkHttpHeaders& headers, std::optional<ResponseErrorStruct> errorData)
{

}

void NetworkHttpCallbackHandler::appendResponseBody(const ByteBuffer& buffer, bool isFinished)
{

}

void NetworkHttpCallbackHandler::completeResponse(const HttpResponseMetrics& metrics)
{

}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish NetworkHttpCallbackHandler Logic///////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
}