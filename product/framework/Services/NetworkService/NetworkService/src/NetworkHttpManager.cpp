#include "NetworkHttpManager.h"
#include <ucf/Services/ServiceCommonFile/ServiceLogger.h>
#include <ucf/NetworkService/LibCurlClient/LibCurlClient.h>

namespace ucf::network::http{
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
class NetworkHttpManager::DataPrivate{
public:
    DataPrivate();
    std::shared_ptr<ucf::network::libcurl::LibCurlClient> getLibCurlClient() const;
private:
    std::shared_ptr<ucf::network::libcurl::LibCurlClient> mLibcurlClient;
};

NetworkHttpManager::DataPrivate::DataPrivate()
    :mLibcurlClient(std::make_shared<ucf::network::libcurl::LibCurlClient>())
{

}

std::shared_ptr<ucf::network::libcurl::LibCurlClient> NetworkHttpManager::DataPrivate::getLibCurlClient() const
{
    return mLibcurlClient;
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start NetworkHttpManager Logic///////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
NetworkHttpManager::NetworkHttpManager()
    : mDataPrivate(std::make_unique<DataPrivate>())
{
    SERVICE_LOG_DEBUG("Create NetworkHttpManager, address:" << this);
}
 
NetworkHttpManager::~NetworkHttpManager()
{
   SERVICE_LOG_DEBUG("");
}

void NetworkHttpManager::sendHttpRequest(const NetworkHttpRequest& httpRequest, const NetworkHttpResponseCallbackFunc& callBackFunc)
{
    SERVICE_LOG_DEBUG("");

    auto headerCallback = [this, weakThis = weak_from_this()](const NetworkHttpResponse& response) {
    };

    auto bodyCallback = [this, weakThis = weak_from_this()](const ByteBuffer& buffer, bool isFinished){

    };

    auto completionCallback = [this, weakThis = weak_from_this()](const HttpResponseMetrics& metrics){

    };
    mDataPrivate->getLibCurlClient()->makeGenericRequest(httpRequest, headerCallback, bodyCallback, completionCallback);
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish NetworkHttpManager Logic///////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
}