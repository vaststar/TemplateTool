#include <ucf/Services/NetworkService/Model/HttpRawResponse.h>

namespace ucf::service::network::http{
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
class HttpRawResponse::DataPrivate
{
public:
    DataPrivate();
    void setHttpResponseCode(int statusCode){ mResponseCode = statusCode;}
    int getHttpResponseCode() const{ return mResponseCode;}

    void setResponseHeaders(const NetworkHttpHeaders& headers){ mResponseHeaders = headers;}
    NetworkHttpHeaders getResponseHeaders() const{ return mResponseHeaders;}

    void setErrorData(const ResponseErrorStruct& errorData){ mErrorData = errorData;}
    std::optional<ResponseErrorStruct> getErrorData() const{ return mErrorData;}

    void setResponseBody(const ByteBuffer& buffer){ mResponseBody = buffer;}
    ByteBuffer getResponseBody() const{ return mResponseBody;}
private:
    int mResponseCode;
    NetworkHttpHeaders mResponseHeaders;
    std::optional<ResponseErrorStruct> mErrorData;
    ByteBuffer mResponseBody;
};

HttpRawResponse::DataPrivate::DataPrivate()
    : mResponseCode(0)
{

}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start HttpRawResponse Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
HttpRawResponse::HttpRawResponse()
    : mDataPrivate(std::make_unique<HttpRawResponse::DataPrivate>())
{

}

HttpRawResponse::~HttpRawResponse()
{

}


void HttpRawResponse::setHttpResponseCode(int statusCode)
{
    mDataPrivate->setHttpResponseCode(statusCode);
}

int HttpRawResponse::getHttpResponseCode() const
{
    return mDataPrivate->getHttpResponseCode();
}

void HttpRawResponse::setResponseHeaders(const NetworkHttpHeaders& headers)
{
    mDataPrivate->setResponseHeaders(headers);
}

NetworkHttpHeaders HttpRawResponse::getResponseHeaders() const
{
    return mDataPrivate->getResponseHeaders();
}

void HttpRawResponse::setErrorData(const ResponseErrorStruct& errorData)
{
    mDataPrivate->setErrorData(errorData);
}

std::optional<ResponseErrorStruct> HttpRawResponse::getErrorData() const
{
    return mDataPrivate->getErrorData();
}

void HttpRawResponse::setResponseBody(const ByteBuffer& buffer)
{
    mDataPrivate->setResponseBody(buffer);
}

ByteBuffer HttpRawResponse::getResponseBody() const
{
    return mDataPrivate->getResponseBody();
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start HttpRawResponse Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
}