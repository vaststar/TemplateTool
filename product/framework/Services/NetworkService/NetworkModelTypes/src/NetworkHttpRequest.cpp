#include <ucf/NetworkService/NetworkModelTypes/Http/NetworkHttpRequest.h>

namespace ucf::network::http{
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
class NetworkHttpRequest::DataPrivate{
public:
    DataPrivate(const HTTPMethod& method, const std::string& uri, const std::map<std::string, std::string>& headers, const std::string& payload);
    HTTPMethod getMethod() const;
    std::string getUri() const;
    std::string getPayload() const;
    std::map<std::string, std::string> getHeaders() const;
private:
    HTTPMethod mMethod;
    std::string mUri;
    std::map<std::string, std::string> mHeaders;
    std::string mPayload;
};

NetworkHttpRequest::DataPrivate::DataPrivate(const HTTPMethod& method, const std::string& uri, const std::map<std::string, std::string>& headers, const std::string& payload)
    : mMethod(method)
    , mUri(uri)
    , mHeaders(headers)
    , mPayload(payload)
{

}

NetworkHttpRequest::~NetworkHttpRequest()
{

}

HTTPMethod NetworkHttpRequest::DataPrivate::getMethod() const
{
    return mMethod;
}

std::string NetworkHttpRequest::DataPrivate::getUri() const
{
    return mUri;
}

std::string NetworkHttpRequest::DataPrivate::getPayload() const
{
    return mPayload;
}

std::map<std::string, std::string> NetworkHttpRequest::DataPrivate::getHeaders() const
{
    return mHeaders;
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start NetworkHttpRequest Logic///////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

NetworkHttpRequest::NetworkHttpRequest(const HTTPMethod& method, const std::string& uri, const std::map<std::string, std::string>& headers, const std::string& payload)
    :mDataPrivate(std::make_unique<DataPrivate>(method, uri, headers, payload))
{

}

HTTPMethod NetworkHttpRequest::getRequestMethod() const
{
    return mDataPrivate->getMethod();
}

std::string NetworkHttpRequest::getRequestUri() const
{
    return mDataPrivate->getUri();
}

std::map<std::string, std::string> NetworkHttpRequest::getRequestHeaders() const
{
    return mDataPrivate->getHeaders();
}

std::string NetworkHttpRequest::getRequestPayload() const
{
    return mDataPrivate->getPayload();
}

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish NetworkHttpRequest Logic///////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
}