#include <map>
#include <mutex>


#include <ucf/Utilities/DatabaseUtils/DatabaseWrapper/IDatabaseWrapper.h>

#include <ucf/Services/DataWarehouseService/DatabaseModel.h>
#include <ucf/Services/ServiceCommonFile/ServiceLogger.h>

#include "DataWarehouseSchemas.h"
#include "DataWarehouseManager.h"

namespace ucf::service{
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
class DataWarehouseManager::DataPrivate
{
public:
    explicit DataPrivate(ucf::framework::ICoreFrameworkWPtr coreFramework);
    ~DataPrivate();
    void initializeDB(const model::DBConfig& dbConfig);
private:
    ucf::utilities::database::DatabaseSchemas createUserTables();
private:
    mutable std::mutex mDatabaseMutex;
    std::map<model::DBEnum, std::shared_ptr<ucf::utilities::database::IDatabaseWrapper>> mDatabaseWrapper;
};

DataWarehouseManager::DataPrivate::DataPrivate(ucf::framework::ICoreFrameworkWPtr coreFramework)
{

}

DataWarehouseManager::DataPrivate::~DataPrivate()
{
    mDatabaseWrapper.clear();
}

void DataWarehouseManager::DataPrivate::initializeDB(const model::DBConfig& dbConfig)
{
    if (mDatabaseWrapper.find(dbConfig.dbType) == mDatabaseWrapper.end())
    {
        mDatabaseWrapper[dbConfig.dbType] = ucf::utilities::database::IDatabaseWrapper::createSqliteDatabase(ucf::utilities::database::SqliteDatabaseConfig{dbConfig.dbFilePath, dbConfig.password});
        mDatabaseWrapper[dbConfig.dbType]->open();
        mDatabaseWrapper[dbConfig.dbType]->createTables(createUserTables());
    }
    else
    {
        SERVICE_LOG_WARN("already have dbType:" << static_cast<int>(dbConfig.dbType));
    }
}

ucf::utilities::database::DatabaseSchemas DataWarehouseManager::DataPrivate::createUserTables()
{
    return {db::schema::UserContactTable{}, db::schema::GroupContactTable{}};
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish DataPrivate Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Start DataWarehouseManager Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
DataWarehouseManager::DataWarehouseManager(ucf::framework::ICoreFrameworkWPtr coreFramework)
    : mDataPrivate(std::make_unique<DataWarehouseManager::DataPrivate>(coreFramework))
{

}

DataWarehouseManager::~DataWarehouseManager()
{

}
void DataWarehouseManager::initializeDB(const model::DBConfig& dbConfig)
{
    mDataPrivate->initializeDB(dbConfig);
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////Finish DataWarehouseManager Logic//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
}